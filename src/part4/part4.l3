#lang racket/base

(define last-item
    (lambda (lst)
         (if (null? (cdr lst))
            (car lst)
            (last-item (cdr lst))
        )
))


(define remove-last-item
  (lambda (lst)
    (if (null? (cddr lst)) 
        (list (car lst))
        (cons (car lst) (remove-last-item (cdr lst)))
        )
    )
) 



(define rotate-nth
  (lambda (lst n)
    (if (equal? n 0)
        lst
        (rotate-nth (cons (last-item lst) (remove-last-item lst)) (- n 1)))))
